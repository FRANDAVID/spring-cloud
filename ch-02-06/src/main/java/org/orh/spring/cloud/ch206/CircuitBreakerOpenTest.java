package org.orh.spring.cloud.ch206;

import com.netflix.hystrix.HystrixCommand;
import com.netflix.hystrix.HystrixCommandGroupKey;
import com.netflix.hystrix.HystrixCommandProperties;

/**
 * 断路器 “保险丝”为关闭，即不断路，以下测试 达到阀值 打开断路器
 */
public class CircuitBreakerOpenTest {
    public static void main(String[] args) {
        // 10 s内20个请求，50%失败
        for (int i = 0; i < 25; i++) { //25 , 大于默认的阀值20 【https://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.requestVolumeThreshold】
            ErrorCommand command = new ErrorCommand();
            command.execute();
            System.out.println("i：" + i + ", circuitBreakerOpen: " + command.isCircuitBreakerOpen()); // 第20次应该就处于打开状态了
        }
    }

    static class ErrorCommand extends HystrixCommand<String> {

        protected ErrorCommand() {
            super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("ExampleGroup"))
                    .andCommandPropertiesDefaults(
                            HystrixCommandProperties.Setter()
                                    .withExecutionTimeoutInMilliseconds(500) // 认定执行逻辑超时的时间
                    )
            );
        }

        @Override
        protected String run() throws Exception {
            Thread.sleep(800); // 大于上面设置的500 ms，则固定会执行 fallback
            return "success";
        }

        @Override
        protected String getFallback() {
            return "fallback";
        }
    }
}
